#!/usr/bin/php
<?php

$regfiles = '/(html|php|pl|cgi|bak|sh)$/';
$regscript = '/(r57|c99|web shell|[^A-Za-z_]+passthru|shell_exec|phpinfo|base64_decode|edoced_46esab|PHPShell|EHLO|MAIL FROM|RCPT TO|fsockopen\s*\(|\$random_num\.qmail|getmxrr|killall -9|bit\.ly|\$\{"\\x|\'extract\'|\?><\?php|@move_uploaded_file|input type="file"|[^\S]+eval\s*\(|\/\.\*\/e|http-equiv="refresh")/';

$regscriptlight = '/(\$.{3}\[10\]'
	.'|letcaro\.com'
	.'|zbUVSfJ'
	.'|<\?php[ \t]{10}'
	.'|l\(base64_decode'
	.'|eval\s*\(base64_decode\s*\('
	.'|base64_decode\(\$_POST'
	.'|@error_reporting\(0\)'
	.'|web shell'
	.'|[^A-Za-z_\']+passthru'
	.'|edoced_46esab'
	.'|PHPShell'
	.'|\$random_num\.qmail'
	.'|getmxrr'
	.'|killall -9'
	.'|\$\{"\\x'
	.'|\'extract\''
	.'|\/\.\*\/e'
	.'|http-equiv="refresh"'
	.'|echo \'good\''
	.'|if \(\$file_name\) \$header'
	.'|eval\(stripslashes'
	.'|udp flood'
	.'|window\.top\.location\.href'
	.'|array_diff_ukey\(@array\('
	.'|Array\(base64_decode'
	.'|"e"."v"."a"'
	.'|rrmdir'
#	.'|"\."[^\.,\) \$;]+';
	.'|\$[^\[]+\[\d+\]\.\$'
	.')/i';

$replace = <<<EOF
/(<\?php \/\*versio:b.01\*\/ \$GLOBALS\["[^"]+"\]=".*\?>
|<\?php\s+eval\(base64_decode\(\\\\$_POST\[\'[^\']+\'\]\)\);\?>
|^<\?php if\(!isset\(\$GLOBALS\["\\\\x*\d+\\\\x*\d+.*?>
|.*substr\(\$[^,]+,\(\d+-\d+\),\(\d+-\d+\)\);.*\$[a-z]+-1[^?]+\?>
|<\?php.*\\\\x65\\\\x76\\\\x61\\\\x6c\\\\x28[^\?]+(\?>|)
|<\?php.*\\\\x62\\\\141\\\\x73\\\\145\\\\x36\\\\64\\\\x5f\\\\144\\\\x65\\\\143\\\\x6f\\\\144\\\\x65[^\?]+(\?>|))/si
EOF;

$replace = <<<'EOF'
/(
	<\?php \/\*versio:b.01\*\/ \$GLOBALS\["[^"]+"\]=".*\?>
	|<\?php\s+eval\(base64_decode\(\$_POST\[\'[^\']+\'\]\)\);\?>
	|^<\?php if\(!isset\(\$GLOBALS\["\\\\x*\d+\\\\x*\d+.*?>
	|<\?php.*\\x65\\x76\\x61\\x6c\\x28[^\?]+(\?>|)
	|<\?php.*\\x62\\141\\x73\\145\\x36\\64\\x5f\\144\\x65\\143\\x6f\\144\\x65[^\?]+(\?>|)
	|<\?php[^\?]+PCT4BA6ODSE_[^\?]+(\?>|)
        |<\?.*eval\(\$_(POST|GET)[^\?]+(\?>|)
)/six
EOF;


$remove = '/(\{\r\necho \'good\';\r\n\}'
	.'|\$auth_pass = "[^"]+";'
	.'|\$GLOBALS\[\'[^\']+\'\]\(NULL\);'
	.'|window\.top\.location\.href="'
	.'|\$android = strpos\(\$_SERVER\[\'HTTP_USER_AGENT\'\],"Android"\);'
	.'|\(string\)\$_REQUEST\[\'password\'\]=>1\)'
	.'|\]\}="------------".\$'
	.'|killall -9)/s';

$reps = array(
	#'~(?:#|//)[^\r\n]*|/\*.*?\*/~s' => ''
);

$cwd = getcwd();

$Directory = new RecursiveDirectoryIterator($cwd);
$Iterator = new RecursiveIteratorIterator($Directory, RecursiveIteratorIterator::CHILD_FIRST);
$Regex = new RegexIterator($Iterator, $regfiles, RecursiveRegexIterator::GET_MATCH);

echo "###
# Scan Started
#
";

foreach ($Regex as $fn => $i)
{
	# Without Comments
	#$check = preg_replace(array_keys($reps), array_values($reps), file_get_contents($fn));

	# Raw
	#echo "Checking file: {$fn}\n";
	$check = file_get_contents($fn);

	if (preg_match($replace, $check, $m)) {
		echo "\n\nAutomatically cleaning file: {$fn}\n";
		$out = preg_replace($replace, '', $check);
		$d = dirname($fn).'/'.basename($fn).'.sqn';
		if (!rename($fn, $d)) die('Something went wrong.');
		if (!empty($out)) file_put_contents($fn, $out);
	}

	if (preg_match($remove, $check, $m)) {
		echo "\n\nQuaranteening file: {$fn}\n";
		$d = dirname($fn).'/'.basename($fn).'.sqn';
		if (!rename($fn, $d)) die('Something went wrong.');
	}

	if (preg_match($regscriptlight, $check, $m, PREG_OFFSET_CAPTURE))
	{
		$rel = getRelativePath($cwd, $fn);
		$off = $m[1][1];
		# Skip whitelisted items.
		#if (isset($white[$rel]) && array_search($off, $white[$rel]) !== false) continue;
		echo "\n\nSuspicious ({$m[1][0]}) Signature ({$off}) Sample: ".substr($check,$off-20,40)."\n{$rel}";
	}
}

echo "\n\n\n";

function getRelativePath($from, $to)
{
    // some compatibility fixes for Windows paths
    $from = is_dir($from) ? rtrim($from, '\/') . '/' : $from;
    $to   = is_dir($to)   ? rtrim($to, '\/') . '/'   : $to;
    $from = str_replace('\\', '/', $from);
    $to   = str_replace('\\', '/', $to);

    $from     = explode('/', $from);
    $to       = explode('/', $to);
    $relPath  = $to;

    foreach($from as $depth => $dir) {
        // find first non-matching dir
        if($dir === $to[$depth]) {
            // ignore this directory
            array_shift($relPath);
        } else {
            // get number of remaining dirs to $from
            $remaining = count($from) - $depth;
            if($remaining > 1) {
                // add traversals up to first matching dir
                $padLength = (count($relPath) + $remaining - 1) * -1;
                $relPath = array_pad($relPath, $padLength, '..');
                break;
            } else {
                $relPath[0] = './' . $relPath[0];
            }
        }
    }
    return implode('/', $relPath);
}
